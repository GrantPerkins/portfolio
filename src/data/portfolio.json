[
  {
    "name": "Axon",
    "link": "https://docs.wpilib.org/en/latest/docs/software/wpilib-tools/axon/introduction.html",
    "image": "hatchcover.png",
    "description": "While working at WPILib, I lead development on Axon, a TensorFlow-backed web app for retraining COCO trained Mobilenets for use in the FIRST Robotics Competition. Axon provides a friendly interface for creating datasets, training models with live metrics, and inferencing TFLite models. There is a Docker backend that runs various TensorFlow 1.12 processes. To trigger the Docker containers to run, there is a TypeScript server. Finally, a React frontend written in TypeScript communicates to the server using GraphQL.",
    "technologies": [
      "Python",
      "TensorFlow",
      "OpenCV",
      "Docker",
      "TypeScript",
      "GraphQL",
      "React"
    ]
  },
  {
    "name": "GRIP",
    "link": "https://docs.wpilib.org/en/stable/docs/software/vision-processing/grip/introduction-to-grip.html",
    "image": "grip.png",
    "description": "While working at WPILib, I maintained GRIP, the Graphically Represented Image Processing engine. It provides an easy-to-use GUI to develop OpenCV vision pipelines, as well as generate code in Python, C++, and Java. GRIP uses a drag-and-drop interface to implement all base OpenCV functions, such as erode, resize, and contour detection. This tool is used by thousands of high school students every year, and is one of WPILib's most popular tools.",
    "technologies": [
      "OpenCV",
      "Java",
      "Python",
      "C++",
      "Gradle"
    ]
  },
  {
    "name": "Distributed Computing Systems Class Final Project",
    "link": "https://github.com/GrantPerkins/portfolio/blob/master/src/data/mnist.ipynb",
    "image": "sagemaker.jpg",
    "description": "For my final project of WPI's Distributed Computing Systems class, I developed a distributed machine learning MNIST classification solution with TensorFlow and AWS SageMaker. The MNIST dataset is split between all of the worker computers. A custom Python program was run across these workers. Each worker had a different \"rank\", and this rank was used to determine which slice of the dataset the worker should use. The lead worker printed metrics every 50 epochs. My Python script trained a custom convolutional neural network, calculating loss using cross entropy across all workers. The lead worker ran the optimizer",
    "technologies": ["Python", "TensorFlow", "AWS SageMaker", "AWS S3"]
  },
  {
    "name": "Accurate Centroid-Determining Human Body Detection",
    "link": "https://drive.google.com/file/d/1XcTCKMBJ2OyixukSnBX50-Wzj0SVDF7a/view?usp=sharing",
    "image": "centroid.png",
    "description": "Accurate Centroid-Determining Human Body Detection is a project I developed for the Massachusetts State Science Fair. I developed a triple neural network system for detecting the centroid of human body in depth images. I used a sparse auto-encoder, a convolutional neural network, sliding window localization, and a Haar cascade classifier to accomplish this task.",
    "technologies": ["Python", "TensorFlow", "MatPlotLib", "OpenCV"]
  }
]
